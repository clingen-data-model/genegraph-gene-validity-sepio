(ns genegraph.transform.gene-validity.website-events
  "Code to populate 'all curation events' topic for website."
  (:require [genegraph.framework.storage.rdf :as rdf]
            [genegraph.framework.event :as event]
            [genegraph.framework.storage :as storage]
            [io.pedestal.log :as log]
            [io.pedestal.interceptor :as interceptor]
            [clojure.java.io :as io]
            [clojure.data.json :as json]
            [clojure.spec.alpha :as s]))


;; Generated by claude.ai  Impressive.
;; Basic types
(s/def ::non-empty-string (s/and string? #(not (empty? %))))
(s/def ::timestamp-string (s/and string? #(re-matches #"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$" %)))
(s/def ::uri-string (s/and string? #(re-matches #"^http.*" %)))
(s/def ::nullable-timestamp (s/nilable ::timestamp-string))

;; schema_version
(s/def ::schema_version ::non-empty-string)

;; affiliation
(s/def ::affiliate_id pos-int?)
(s/def ::affiliation (s/keys :req-un [::affiliate_id]))

;; references
(s/def ::source_uuid ::uri-string)
(s/def ::alternate_uuid ::uri-string)
(s/def ::dx_location ::non-empty-string)

;; additional_properties
(s/def ::gci_snapshot_id ::non-empty-string)
(s/def ::genegraph_proposition_id ::uri-string)
(s/def ::additional_properties
  (s/keys :req-un [::gci_snapshot_id
                   ::genegraph_proposition_id]))

(s/def ::references
  (s/keys :req-un [::source_uuid
                   ::alternate_uuid
                   ::dx_location
                   ::additional_properties]))

;; source
(s/def ::source #{"GENEGRAPH"})

;; activity
(s/def ::activity #{"VALIDITY"})

;; workflow
(s/def ::classification_date ::timestamp-string)
(s/def ::publish_date ::timestamp-string)
(s/def ::unpublish_date ::nullable-timestamp)
(s/def ::workflow (s/keys :req-un [::classification_date ::publish_date]
                          :opt-un [::unpublish_date]))

;; event_type
(s/def ::event_type #{"PUBLISH" "UNPUBLISH" "RETRACT" "RETIRE"})

;; version
(s/def ::display ::non-empty-string)
(s/def ::internal ::non-empty-string)
(s/def ::reasons (s/coll-of #{"RECURATION_TIMING"
                              "ADMIN_UPDATE_DISEASE_NAME"
                              "RECURATION_FRAMEWORK"
                              "RECURATION_COMMUNITY_REQUEST"
                              "RECURATION_GENEGRAPH_CALCULATED"
                              "RECURATION_DISCREPANCY_RESOLUTION"
                              "NEW_CURATION"
                              "RECURATION_ERROR_SCORE_CLASS"
                              "ADMIN_UPDATE_OTHER"
                              "ADMIN_UPDATE_GENEGRAPH_CALCULATED"
                              "RECURATION_NEW_EVIDENCE"}
                            :kind vector?))
(s/def ::description (s/nilable string?))

(s/def ::version (s/keys :req-un [::display ::internal ::reasons ::description]))

;; event_subtype
(s/def ::event_subtype #{"CURATION"})

;; Root entity
(s/def ::event-data
  (s/keys :req-un [::schema_version 
                  ::affiliation 
                  ::references 
                  ::source 
                  ::activity 
                  ::workflow 
                  ::event_type 
                  ::version 
                  ::event_subtype]))

;; Example usage:
(comment
  (def example-data
    {:schema_version "1.0",
     :affiliation {:affiliate_id 40021},
     :references
     {:source_uuid
      "http://dataexchange.clinicalgenome.org/gci/7765e2a4-19e4-4b15-9233-4847606fc501",
      :alternate_uuid
      "http://dataexchange.clinicalgenome.org/gci/7765e2a4-19e4-4b15-9233-4847606fc501v1.0",
      :dx_location "gene-validity-sepio",
      :additional_properties
      {:gci_snapshot_id "7765e2a4-19e4-4b15-9233-4847606fc501",
       :genegraph_proposition_id
       "http://dataexchange.clinicalgenome.org/gci/55ca8d81-f718-428e-ab59-75f7a9182d08"}},
     :source "GENEGRAPH",
     :activity "VALIDITY",
     :workflow
     {:classification_date "2017-11-27T05:00:00.000Z",
      :publish_date "2020-09-01T00:00:00Z",
      :unpublish_date nil},
     :event_type "PUBLISH",
     :version
     {:display "1.0.0",
      :internal "1.0.0",
      :reasons ["NEW_CURATION"],
      :description ""},
     :event_subtype "CURATION"})
  
  ;; Validate the data
  (s/valid? ::event-data example-data)
  ;; => true
  
  ;; Explain validation errors (if any)
  (s/explain ::event-data example-data)
)

(def sample-message
  {:schema_version "1.0"                                ;req-fixed
   :event_type "PUBLISH | UNPUBLISH | RETRACT | RETIRE" ;req
   :event_subtype "CURATION | TEST"                     ;req 
   :workflow {:classification_date "ISO8601"            ;req 
              :publish_date "ISO8601"   ;req -- publish 
              :unpublish_date "ISO8601" ;req -- unpublish
              } 
   :source "GCI | VCI | DCI | ACI | EREPO | GENEGRAPH"     ;req 
   :activity "ACTIONABILITY | DOSAGE | VALIDITY | VARIANT" ;req 
   :references {:source_uuid "string"                      ;req ?
                :dx_location "string"    ;req -- gene-validity-sepio
                :alternate_uuid "string" ;; ??? leave this one out 
                :additional_properties [{:key "value"}] ; also leave out
                }
   :affiliation {:affiliate_id "number" ; req , must be 40series integer 
                 :affiliate_name "string" ; may leave out 
                 }
   :version {:display "decimal string"  ; req
             :internal "decimal string" ; req -- same as display
             :reasons "array"           ; req
             :description "string"      ; req -- think in reasons 
             :additional_properties [{:key "value"}] ; probably leave out 
             :changes [{:change_code "CHANGE_CODE" ; not req per description, will leave out for now
                        :attribute "string"
                        :from "string"
                        :to "string"}]
             :notes {:public "string"   ; also optional I assume 
                     :private "string"}}
   :urls {:source "https://curationn.clinicalgenome.org/curation-central/6e14e6fb-aef7-4c97-9e06-a60e6ffcf64b/"
          :url {:preferred "url"}}})

(def trimmed-message
  {:schema_version "1.0"
   :event_type "PUBLISH | UNPUBLISH" ;req
   :event_subtype "CURATION" ;req 
   :workflow {:classification_date "ISO8601" ;req 
              :publish_date "ISO8601" ;req -- publish 
              :unpublish_date "ISO8601" ;req -- unpublish
              } 
   :source "GENEGRAPH"  ;req 
   :activity "VALIDITY" ;req 
   :references {:source_uuid "string" ; Genegraph URL for 'is-version-of'
                :dx_location "string" ; gene-validity-sepio
                }
   :affiliation {:affiliate_id "number" ; req , must be 40series integer 
                 :affiliate_name "string" ; may leave out 
                 }
   :version {:display "decimal string" ; req
             :internal "decimal string" ; req -- same as display
             :reasons "array" ; req
             :description "string" ; req -- think in reasons 
             :additional_properties [{:key "value"}] ; probably leave out 
}})

;; Comments from call 2-13

;; Unpublish events need a target ID, double check event type
;; Include GCI GDM id and Snapshot ID in addiitonal properties.
;; Include Genegraph versioned and unversioned identifier.

(def activity-query
  (rdf/create-query "
select ?act where {
?act :cg/role ?activity .
}
"))

(defn activity-date [curation-model activity]
  (if-let [activity (first (activity-query curation-model
                                          {:activity activity}))]
    (rdf/ld1-> activity [:cg/date])))



(defn version-string [version-map]
  (str (:major version-map "0")
       "."
       (:minor version-map "0")
       "."
       (:patch version-map "0")))

(def assertion-query
  (rdf/create-query "select ?x where { ?x a :cg/EvidenceStrengthAssertion }"))

(def genegraph-reason->website-reason
  {:cg/NewCuration "NEW_CURATION"
   :cg/DiseaseNameUpdate "ADMIN_UPDATE_DISEASE_NAME"
   :cg/ErrorClarification "ADMIN_UPDATE_OTHER"
   :cg/RecurationCommunityRequest "RECURATION_COMMUNITY_REQUEST"
   :cg/RecurationTiming "RECURATION_TIMING"
   :cg/RecurationNewEvidence "RECURATION_NEW_EVIDENCE"
   :cg/RecurationFrameworkChange "RECURATION_FRAMEWORK"
   :cg/RecurationErrorAffectingScoreorClassification "RECURATION_ERROR_SCORE_CLASS"
   :cg/RecurationDiscrepancyResolution "RECURATION_DISCREPANCY_RESOLUTION"})

(defn curation-reasons [assertion version]
  (let [gci-reasons (rdf/ld-> assertion [:cg/curationReasons])]
    (if (seq gci-reasons)
      (mapv #(-> % rdf/->kw (genegraph-reason->website-reason "ADMIN_UPDATE_OTHER"))
            gci-reasons)
      (cond
        (and (= 1 (:major version))
             (= 0 (:minor version))) ["NEW_CURATION"]
        (= 0 (:minor version)) ["RECURATION_GENEGRAPH_CALCULATED"]
        :else ["ADMIN_UPDATE_GENEGRAPH_CALCULATED"]))))

(defn affiliation-number [curation-model]
  (if-let [approval (first (activity-query curation-model {:activity :cg/Approver}))]
    #_(re-find #"\d+" (str approval))
    (->> (rdf/ld1-> approval [:cg/agent])
         str
         (re-find #"\d+$")
         Integer/parseInt
         (+ 30000))))

(def proposition-query
  (rdf/create-query "
select ?x where {
 ?x a :cg/GeneValidityProposition .
}"))

(defn get-previous-version [event]
  (storage/read
   (get-in event [::storage/storage :gene-validity-version-store])
   (-> event
       :gene-validity/model
       proposition-query
       first
       str)))

(defn get-previous-website-event [event]
  (storage/read
   (get-in event [::storage/storage :gene-validity-version-store])
   [::website-event
    (-> event
        :gene-validity/model
        proposition-query
        first
        str)]))

(defn proposition-id [m]
  (some-> (proposition-query m) first str))

(defn event->base-event [event]
  (let [curation-model (:gene-validity/model event)
        assertion (first (assertion-query curation-model))
        version (version-string (:gene-validity/version event))
        snapshot-id (str (rdf/ld1-> assertion [:cg/GCISnapshot]))]
    {:schema_version "1.0"
     :event_subtype "CURATION"
     :workflow {:classification_date (activity-date curation-model
                                                    :cg/Approver)
                :publish_date (activity-date curation-model
                                             :cg/Publisher)
                :unpublish_date nil} 
     :source "GENEGRAPH"
     :activity "VALIDITY"
     :references {:source_uuid (str assertion)
                  :alternate_uuid (str assertion)
                  :dx_location "gene-validity-sepio"
                  :additional_properties
                  {:gci_snapshot_id (if (seq snapshot-id)
                                      (subs snapshot-id 43)
                                      nil)
                   :genegraph_proposition_id
                   (proposition-id curation-model)}}
     :affiliation {:affiliate_id (affiliation-number curation-model)}
     :version {:display version
               :internal version
               :reasons (curation-reasons assertion
                                          (:gene-validity/version event))
               :description (rdf/ld1-> assertion [:cg/curationReasonDescription])}}))

;; previous event can be ::storage/miss 
(defn unpublish-event->website-event [event]
  (let [previous-event (get-previous-website-event event)]
    (if (and previous-event (not= ::storage/miss previous-event))
      (-> previous-event
            (assoc-in [:workflow :unpublish_date]
                      (activity-date (:gene-validity/model event)
                                     :cg/Unpublisher))
            (assoc :event_type "UNPUBLISH"))
      nil)))

(defn publish-event->website-event [event]
  (assoc (event->base-event event)
         :event_type "PUBLISH"))

(defn event->website-event [event]
  (if (activity-date (:gene-validity/model event) :cg/Unpublisher)
    (unpublish-event->website-event event)
    (publish-event->website-event event)))

(defn add-website-event [e]
  (assoc
   e
   :gene-validity/website-event
   (event->website-event e)))

(defn website-version-interceptor-fn [e]
  (if (:gene-validity/change-type e)
    (let [website-event (event->website-event e)]
      (-> e
          (assoc :gene-validity/website-event website-event)
          (event/store
           :gene-validity-version-store
           [::website-event
            (get-in website-event
                    [:references
                     :additional_properties
                     :genegraph_proposition_id])]
           website-event)))
    e))

(def website-version-interceptor
  (interceptor/interceptor
   {:name ::website-version-interceptor
    :enter (fn [e] (website-version-interceptor-fn e))}))


(comment
  (tap> (:gene-validity/change-type test-event))
  (def test-event
    (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-03-24.edn.gz"]
      (->> (genegraph.framework.event.store/event-seq r)
           (take 1)
           (map #(-> %
                     genegraph.user/transform-curation
                     (dissoc :gene-validity/gci-model)
                     add-website-event))
           first)))

  (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-01-06.edn.gz"]
    (->> (genegraph.framework.event.store/event-seq r)
         (take 1)
         (map #(-> %
                   genegraph.user/transform-curation
                   (dissoc :gene-validity/gci-model)
                   add-website-event))
         first
         tap>))

  (def recent-event
    (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-01-06.edn.gz"]
      (->> (genegraph.framework.event.store/event-seq r)
           (take-last 1)
           (map #(-> %
                     genegraph.user/transform-curation
                     (dissoc :gene-validity/gci-model)
                     add-website-event))
           first)))

  (def recuration
    (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-01-06.edn.gz"]
      (->> (genegraph.framework.event.store/event-seq r)
           (take-last 50)
           (map #(-> %
                     genegraph.user/transform-curation
                     (dissoc :gene-validity/gci-model)
                     add-website-event))
           (remove #(-> %
                        :gene-validity/website-event
                        :version
                        :reasons
                        set
                        (clojure.set/intersection #{"NEW_CURATION"})
                        seq))
           (take 1)
           first)))

  (def unpublish
    (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-03-24.edn.gz"]
      (->> (genegraph.framework.event.store/event-seq r)
           (take-last 50)
           (map #(-> %
                     genegraph.user/transform-curation
                     (dissoc :gene-validity/gci-model)
                     add-website-event))
           (filter #(get-in % [:gene-validity/website-event
                               :workflow
                               :unpublish_date]))
           (take 1)
           first)))

  (tap> (select-keys unpublish
                     [:gene-validity/version
                      :genegraph.framework.event/iri
                      :gene-validity/website-event]
                     ))
  (-> unpublish
      :gene-validity/model
      rdf/pp-model)

  (do
    (def proposition-query
      (rdf/create-query "
select ?x where {
 ?x a :cg/GeneValidityProposition .
}"))

    (defn get-previous-version-key [event db]
      (let [previous-event (storage/read
                            db
                            (-> event
                                :gene-validity/model
                                proposition-query
                                first
                                str))
            assertion-iri (some-> previous-event
                                  :gene-validity/model
                                  assertion-query
                                  first
                                  str)
            {:keys [major minor]} (:gene-validity/version previous-event)]
        (str assertion-iri "v" major "." minor)
        ))
    (let [db @(get-in genegraph.user/test-app [:storage :gene-validity-version-store :instance])]
      (tap> (get-previous-version-key unpublish db)))
    )
  

  (-> recuration genegraph.user/transform-curation :gene-validity/model rdf/pp-model)

  (tap> (:genegraph.framework.event/data recuration))
  
  (rdf/pp-model recent-model)
  (time
   (with-open [w (clojure.java.io/writer "/Users/tristan/Desktop/curation-events-sample.ndjson")]
     (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-03-24.edn.gz"]
       (->> (genegraph.framework.event.store/event-seq r)
            #_(take 5)
            (map #(-> %
                      genegraph.user/transform-curation
                      (dissoc :gene-validity/gci-model)
                      :gene-validity/website-event))
            (remove nil?)
            (map #(str (clojure.data.json/write-str %) "\n"))
            (run! #(.write w %))))))

  (with-open [r (io/reader "/Users/tristan/Desktop/curation-events-sample.ndjson")]
    (->> (line-seq r)
         (map #(json/read-str % :key-fn keyword))
         (remove #(s/valid? ::event-data %))
         (take 1)
         (run! #(s/explain ::event-data %))))

  ;;  (s/valid? ::event-data example-data)
  
  (with-open [r (io/reader "/Users/tristan/Desktop/curation-events-sample.ndjson")]
    (->> (line-seq r)
         (map #(json/read-str % :key-fn keyword))
         #_(take 5)
         (filterv #(re-find #"815e0f84-b530-4fd2-81a9-02e02bf352ee" ;; abcd1
                              (get-in % [:references :alternate_uuid])))
         #_(mapcat #(get-in % [:version :reasons]))
         #_set
         tap>))


  "d1230a85-2a8b-4321-b36d-213daae9a28a"
  (with-open [r (io/reader "/Users/tristan/Desktop/curation-events-sample.ndjson")]
    (tap>
     (update-vals
      (->> (line-seq r)
           (map #(json/read-str % :key-fn keyword))
           (filter #(re-find #"d1230a85-2a8b-4321-b36d-213daae9a28a"
                             (get-in %
                              [:references
                               :additional_properties
                               :genegraph_proposition_id]))))
      (fn [v] (->> (map #(get-in % [:references :source_uuid]) v)
                   set
                   count)))))

  (with-open [r (io/reader "/Users/tristan/Desktop/curation-events-sample.ndjson")]
    (->> (line-seq r)
         (map #(json/read-str % :key-fn keyword))
         (filterv #(re-find #"d1230a85-2a8b-4321-b36d-213daae9a28a"
                           (get-in %
                                   [:references
                                    :additional_properties
                                    :genegraph_proposition_id])))
         tap>))

  (def abcd1
    (time
     (genegraph.framework.event.store/with-event-reader [r "/Users/tristan/data/genegraph-neo/gene_validity_complete-2025-03-24.edn.gz"]
       (->> (genegraph.framework.event.store/event-seq r)
            (filterv #(re-find #"815e0f84-b530-4fd2-81a9-02e02bf352ee"
                               (::event/value %)))))))

  

  (count abcd1)

  (def abcd1-results
    (mapv genegraph.user/transform-curation
          abcd1))

  (tap> (mapv :gene-validity/website-event abcd1-results))
  (count abcd1-results)

  (defn curation-description [m]
    (let [q (rdf/create-query "select ?x where 
{ ?x a :cg/EvidenceStrengthAssertion }")]
      (some-> (q m) first (rdf/ld1-> [:dc/description]))))

  (defn gdm [m]
    (let [q (rdf/create-query "select ?x where 
{ ?x a :cg/GeneValidityProposition }")]
      (some-> (q m) first str)))
  
  (->> abcd1-results
       (mapv (fn [{:gene-validity/keys [website-event model]}]
               {:event_type (:event_type website-event)
                :version (get-in website-event [:version :display])
                :source_uuid (get-in website-event [:references :source_uuid])
                :alternate_uuid (get-in website-event [:references :alternate_uuid])
                :description (curation-description model)
                :gdm (gdm model)}))
       tap>)

  (-> (nth abcd1-results 3)
      :gene-validity/model
      rdf/pp-model)

  (-> (nth abcd1-results 3)
      get-previous-website-event
      tap>
      #_:gene-validity/model
      #_rdf/pp-model)

  (-> (nth abcd1 3)
      event/deserialize
      ::event/data
      pgenegraph.transform.gene-validity.gci-model/remove-extra-provisional-classifications
      tap>)

  
  ;; 04ca29c1-6b44-474c-b54b-1c8be52de172 MRAS


  ;; the UNPUBLISH records all have empty source_uuid.
  ;; not all, but most. Seems like there's something to straighten out here
  
  ;; UNPUBLISH records don't have the unpublish_date set.
  ;; Again, not all, but most.
  ;; Found bug related to unpublish date.  Will test.
  ;; seems to be resolved for ABCD1 test case
  
  ;; Some of the records have reasons as a string, and some have them as an array (which is correct).
  ;; Should be fixed
  ;; fixed in ABCD1 test
  
  ;; ABCD1.  The dates didn't seem to match up with what was in the GCI, particularly on earlier versions.  And second, there is no record of a 1.2 version in the data.  It goes from 1.1 directly from 1.3.
  ;; Can confirm missing 1.2 -- perhaps check database

  ;; appears to be nothing but unpublish for v 1.2 of ABCD1.  Very curious
  ;; Found 1.2 record under a different snapshot ID.  Seems to be one of the merged
  ;; records in the GCI that messes things up
  )
